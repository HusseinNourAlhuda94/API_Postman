{
	"info": {
		"_postman_id": "56014f28-f58a-4d05-8686-00e29e52b721",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24577948"
	},
	"item": [
		{
			"name": "List of books",
			"item": [
				{
					"name": "Get a single book",
					"item": [
						{
							"name": "BookId 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check Id=0\", ()=> {\r",
											"     pm.expect(pm.response.text()).to.include(\"No book with id 0\");\r",
											"\r",
											"         pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:bookId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BookId 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Is in stock\", ()=> {\r",
											"    pm.expect(response['current-stock']).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Id=1\", ()=> {\r",
											"    pm.expect(response['id']).to.be.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:bookId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BookId 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Is in stock\", ()=> {\r",
											"    pm.expect(response['current-stock']).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Id=5\", ()=> {\r",
											"    pm.expect(response['id']).to.be.eql(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:bookId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BookId 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check Id=7\", ()=> {\r",
											"     pm.expect(pm.response.text()).to.include(\"No book with id 7\");\r",
											"\r",
											"         pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:bookId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No Value Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check no value Id\", ()=> {\r",
											"     pm.expect(pm.response.text()).to.include(\"No book with id NaN\");\r",
											"\r",
											"         pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:bookId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Books type Fiction limit 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const fictionBooks = response.filter((book) => book.type == \"fiction\");\r",
									"\r",
									"const book = fictionBooks[0];\r",
									"\r",
									"console.log(book);\r",
									"pm.test(\"Found fiction book, Limit 2\", () => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"\r",
									"     pm.expect(book.type).to.eql(\"fiction\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=2&type=fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of non-fiction Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const nonFictionBooks = response.filter((book) => book.type == \"non-fiction\");\r",
									"\r",
									"const book = nonFictionBooks[1];\r",
									"\r",
									"if(book){\r",
									"    pm.globals.set(\"bookId\", book.id);\r",
									"}\r",
									"\r",
									"console.log(book);\r",
									"pm.test(\"Found non-fiction book\", () => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"   // pm.expect(book.available).to.eql(true);\r",
									"     pm.expect(book.type).to.eql(\"non-fiction\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=non-fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of fiction Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const nonFictionBooks = response.filter((book) => book.available == true);\r",
									"\r",
									"const book = nonFictionBooks[0];\r",
									"\r",
									"if(book){\r",
									"    pm.globals.set(\"bookId\", book.id);\r",
									"}\r",
									"\r",
									"console.log(book);\r",
									"pm.test(\"Book found\", () => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"    pm.expect(book.available).to.eql(true);\r",
									"    pm.expect(book.available).to.be.true;\r",
									"    pm.expect(book.type).to.eql(\"non-fiction\");\r",
									"\r",
									"\r",
									"});\r",
									"*/\r",
									"\r",
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"const response = pm.response.json();\r",
									" \r",
									"const fictionBooks = response.filter((book) => book.type == \"fiction\");\r",
									"\r",
									"const book = fictionBooks[1];\r",
									"\r",
									"console.log(book);\r",
									"pm.test(\"Found fiction book\", () => {\r",
									"     pm.expect(book).to.be.an('object');\r",
									"     pm.expect(book.type).to.eql(\"fiction\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								},
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of drama Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"\r",
									"    pm.test(\"Check invalid value\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"Invalid value for query parameter 'type'. Must be one of: fiction, non-fiction.\");\r",
									"\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=drama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "drama"
								},
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books Limit 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get Book, limit 1\", ()=> {\r",
									"   pm.expect(response.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"/* pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const nonFictionBooks = response.filter((book) => book.available == true);\r",
									"\r",
									"const book = nonFictionBooks[0];\r",
									"\r",
									"if(book){\r",
									"    pm.globals.set(\"bookId\", book.id);\r",
									"}\r",
									"\r",
									"console.log(book);\r",
									"pm.test(\"Book found\", () => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"    pm.expect(book.available).to.eql(true);\r",
									"    pm.expect(book.available).to.be.true;\r",
									"    pm.expect(book.type).to.eql(\"non-fiction\");\r",
									"\r",
									"\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books Limit 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get Book, limit 20\", ()=> {\r",
									"   pm.expect(response.length).to.eql(6);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books Limit 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"/*\r",
									"    Es muss ein Fehler geben, dass das Limit grosser als 0 sein sollte.\r",
									"*/\r",
									"console.log(response);\r",
									"\r",
									"/*\r",
									"    pm.test(\"Check invalid limit 0\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"Invalid value for query parameter 'limit'. Must be greater than 0.\");\r",
									"         pm.response.to.be.error;\r",
									"    });\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books Limit 21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"\r",
									"    pm.test(\"Check invalid limit 21\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"Invalid value for query parameter 'limit'. Cannot be greater than 20.\");\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "21"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register API Client",
			"item": [
				{
					"name": "Register Api Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()=> {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postasd\",\r\n   \"clientEmail\": \"valentine09@exsdffample.commm\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Api with existing client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", ()=> {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"API client already registered. Try a different email.\");\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postasd\",\r\n   \"clientEmail\": \"valentin@exsdffample.commm\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Submit an order",
			"item": [
				{
					"name": "Submit an order with valid booId and customerName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()=> {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.globals.set(\"orderId\", response.orderId);\r",
									"pm.test(\"Check submit an order\", ()=> {\r",
									"    pm.expect(response['created']).to.be.true;\r",
									"    pm.expect(response['orderId']).to.be.eql(response.orderId);\r",
									"});  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with valid booId and no customerName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()=> {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"\r",
									"pm.test(\"Check submit an order\", ()=> {\r",
									"    pm.expect(response['created']).to.be.true;\r",
									"    pm.expect(response['orderId']).to.be.eql(response.orderId);\r",
									"});  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with valid booId and customerName Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()=> {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check submit an order\", ()=> {\r",
									"    pm.expect(response['created']).to.be.true;\r",
									"});  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order without booId&customerName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", ()=> {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing bookId & customerName\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid or missing bookId.\");\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order missing Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", ()=> {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing Authorization header.\");\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All order",
			"item": [
				{
					"name": "Single order",
					"item": [
						{
							"name": "Get an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const response = pm.response.json();\r",
											"console.log(_.size(response));\r",
											"const orderid= pm.globals.get(\"orderId\");\r",
											"\r",
											"\r",
											"pm.test(\"Check get single order\", ()=> {\r",
											"    pm.expect(response[\"id\"]).to.be.eql(orderid);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "{{orderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an order, invalid orderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Check invalid orderId\", ()=> {\r",
											"    pm.expect(pm.response.text()).to.include(\"No order with id testOrderId.\");\r",
											"         pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "testOrderId"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an order without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Check invalid orderId\", ()=> {\r",
											"    pm.expect(pm.response.text()).to.include(\"No order with id testOrderId.\");\r",
											"         pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "testOrderId"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all orders with Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(_.size(response));\r",
									"console.log(_.keys(response).length);\r",
									"pm.test(\"Check get all order\", ()=> {\r",
									"   // pm.expect(_.size(response)).to.be.eql(19);\r",
									"    pm.expect(response[0].id).to.be.eql(\"Nsvd2u9HjSPmA99NnXOB3\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", ()=> {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing Authorization header.\");\r",
									"         pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()=> {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Ht9ExIXcV3KC50FKw-onR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order,customerName ist null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()=> {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Ht9ExIXcV3KC50FKw-onR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order with inexisting orderId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", ()=> {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"No order with id testOrderId.\");\r",
									"         pm.response.to.be.error;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "testOrderId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", ()=> {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing Authorization header.\");\r",
									"         pm.response.to.be.error;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "testOrderId"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()=> {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order with inexisting orderId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", ()=> {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"No order with id testorderID.\");\r",
									"         pm.response.to.be.error;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "testorderID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", ()=> {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check missing Authorization\", ()=> {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing Authorization header.\");\r",
									"         pm.response.to.be.error;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"List of Book\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "3e17d4241e7dfef8f04e6ba542b72995dfed2cc7e84df83b93baeb3c9b9d16a7",
			"type": "string"
		}
	]
}